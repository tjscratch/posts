{
  "posts": [
    {
      "author": "GoDZilla",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/a2/a25440653b2737613b32b2bc34783b7837dbf0a7_medium.jpg",
      "id": 1,
      "text": "Всем привет! В нашей компании, помимо разработки собственной СУБД, также занимаются заказными разработками по самым разным направлениям, от суровых java-энтерпрайз приложений до небольших мобильных приложений. Наши команды стараются использовать передовые технологии и фреймворки. И как раз я являюсь представителем одной из таких команд. Сегодня хочу поделится опытом разработки на AngularJS и парой мыслей о проектировании веб приложения с использованием этого фреймворка. За время, которое я занимаюсь разработкой, мне приходилось сталкиваться с различными подходами к написанию приложений. Кто-то оборачивает простые вещи в очень странные обертки, так что автору кода приходится в дальнейшем прибегать к «комплементарному декаплингу эксплицируемых компонент» (с). Есть люди, которые, наоборот, нисколько не заморачиваются с архитектурными изысками и пишут код «здесь и сейчас», не заботясь о дальнейшем сопровождении и психическом здоровье коллег. Мне кажется, что код всё же должен быть в меру наполнен абстракциями, и при этом легко делиться на логические модули и легко читаться. Знакомство с AngularJS пару лет назад принесло понимание, как это может неплохо выглядеть в javascript'е. Требования к приложению Можно много спорить о достоинствах и недостатках AngularJS, оставим эти споры за рамками заметки, остановимся только на главном вопросе — можно ли использовать AngularJS в серьезном приложении? С одной стороны, фреймворк накладывает некоторые ограничения на структуру приложения и вводит свои собственные термины для ее описания. Другая же структура и подходы многих ставят в тупик, но это, на мой взгляд, спорный минус, поскольку любой фреймворк, решающий такие масштабные задачи, так или иначе подгоняет под себя архитектуру. Написать приложение на одном фреймворке, а потом с легкостью перенести на другой — это типичная “программистская утопия”. Поэтому аргументы по этому пункту многих коллег мне кажутся сильно надуманными. С другой стороны находится производительность как краеугольный камень любого одностраничного веб-приложения. Во многом производительность AngularJS зависит от того, насколько глубоко вы в него погрузились и насколько правильно используете те или иные компоненты фреймворка. Это не скрывают и создатели AngularJS и честно рассказывают, как все устроено внутри и как можно избежать проблем со скоростью. Главная суть в том, что фреймворк — это инструмент, а каждому инструменту подходит какой-то определенный тип задач.",
      "title": "Опыт разработки и проектирования на AngularJS",
      "userId": 1
    },
    {
      "author": "GoDZilla",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/a2/a25440653b2737613b32b2bc34783b7837dbf0a7_medium.jpg",
      "id": 2,
      "text": "Предлагаю читателям «Хабрахабра» перевод публикации «Is ReactJS really fast?» из блога компании 500Tech. Большинство разработчиков считают само собой разумеющимся, что ReactJS — это супер быстрый движок по сравнениюс другими более тяжеловесными фреймворками, такими как AngularJS и EmberJS. И даже публикация фэйковых результатов не вызывает подозрений, а ведь если копнуть глубже и проанализировать код тестов, то вы будете сильно удивлены. Virtual-DOM Все мы понимаем, что манипуляции с DOM достаточно медленные. На этом и выехал ReactJS, представив новую идею виртуального DOM, позволяющего производить все манипуляции на виртуальных объектах, а в реальное дерево объектов браузера аффектить только разницу, таким образом минимизируя количество запросов к DOM модели и тем самым ускоряя приложение. Интуитивно такой подход воспринимается как возможность серьёзного улучшение производительности, но никто не задумывается о том, насколько на производительность повлияет исполнение достаточно ресурсоёмкого javascript кода для исполнения этой задумки. И так же странно отсутствие каких-либо примеров улучшения производительности при использовании Virtual-DOM, кроме примеров сравнения с другими фреймворками.Мы все видели эти демо, предлагаю рассмотреть их более внимательно.",
      "title": "Так ли быстр ReactJS?",
      "userId": 1
    },
    {
      "author": "Syfer",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/c5/c5db09d6599c65fca350f51f8b71455280615132_medium.jpg",
      "id": 3,
      "text": "Всем привет! Нам бы хотелось представить вашему вниманию статью Энтони Гора о миграции Vue.js-приложения на Vuex. Вид приложения, над которым будет вестись работа по миграции. Далее следует перевод статьи. Всех, кому интересна данная тема, приглашаю под кат. Одной из сложностей в освоении Vuex является то, что это не столько библиотека, сколько паттерн проектирования. Из этого следует, что работа с Vuex – не столько работа с API, сколько структурирование вашего кода в соответствии с паттерном. Если вы новичок во Vuex, это может отпугивать. В этой статье я продемонстрирую как начать миграцию имеющегося Vue.js приложения на Vuex. Я покажу вам, как идентифицировать те части вашего приложения, которые должны принадлежать Vuex, и те, которые не следует переносить, как превратить функции вашей компоненты в мутации, действия и так далее, и, наконец, мы обсудим, какие преимущества мы получим в результате.Если вы не уверены, следует ли вам использовать Vuex, я рекомендую вам сначала прочесть вот эту статью: “Что за Vuex: Руководство для новичков по хранилищу данных во Vue” Учебный пример: Vue.js-кинотеатр В качестве учебного примера мы перенесем демонстрационное приложение Vue.js-кинотеатр на Vuex. Это приложение, состоящее из одного файла, построенное на компонентах Vue, вполне хороший кандидат для демонстрации миграции на Vuex, так как в нем содержится значительное количество состояний. Если хотите узнать, как построить Vue.js-кинотеатр с нуля, это часть моего полного курса разработки на Vue.js. Помните, что целью Vuex является управление состоянием приложения. Из этого следует, что для того, чтобы мигрировать Vue.js-приложение на Vuex, мы должны определить, каково будет его состояние. Мы скоро увидим состояние в коде, но полезно сначала осознать, каким оно будет, посредством простого изучения того, что вообще делает приложение, например, в нашем случае, оно отображает список фильмов, который может быть отфильтрован по дню, времени сеанса или жанру.",
      "title": "Миграция VueJS приложения на Vuex",
      "userId": 3
    },
    {
      "author": "Millenium Project",
      "avatar": "http://m.yii2.inpearls.ru/assets/avatars2/small-45983-1307438127.jpg",
      "id": 4,
      "text": "Привет друзья, хочу поведать вам, одну очень выдающуюся историю о том как я делал онлайн рулетку для одного западного заказчика. И конкретно в этой статье я по большей части коснусь разработки фронтенда. Забегая вперед хочется показать результат: Как все начиналось Обратился как-то ко мне один мой старый заказчик, и предложил пофаниться и сделать многопользовательскую онлайн рулетку на сокетах. Бюджет неплохой, сроки сжатые. Ну ок. Почему бы нет, руки уже чесались, но без бекенда я не начинал… Как только появился первый вариант бекенда. Я сразу же начал действовать. В руки мне попал набросок дизайна, и закрутилось завертелось.",
      "title": "Как я делал realtime рулетку на NodeJS & VueJS",
      "userId": 2
    },
    {
      "author": "Millenium Project",
      "avatar": "http://m.yii2.inpearls.ru/assets/avatars2/small-45983-1307438127.jpg",
      "id": 5,
      "text": "Примечание: ниже расположен перевод статьи «jQuery for JavaScript programmers», в которой автор высказывает свое мнение об этой библиотеке, ориентируясь, в первую очередь, на продвинутых программистов, и приводит несколько десятков примеров ее использования. Когда jQuery увидела свет в январе 2006, я подумал: «очередная красивая игрушка». Выбор CSS-селекторов в качестве базиса было, конечно, изящной идеей (подробнее о ней в моей заметке getElementsBySelector), но использование цепочек преобразований выглядело немного замысловато, и сама библиотека, по-видимому, не покрывала всех возможных случаев. Я расценивал тогда jQuery только как временное и проходящее решение. Только несколько месяцев спустя понял я, насколько же ошибался по отношению к ней. jQuery является просто произведением инженерного искусства. Она умело покрывает достаточно широкой диапазон повседневных функций и предоставляет при этом удобный API для расширений, с помощью которых можно добавить любую другую функциональность. Абстрактность в ней заложена на уровне ядра — речь идет о выборе DOM-элементов — и она извлекает из него максимум пользы. И что важнее всего, использование этой библиотеки подразумевает следование хорошему стилю в программировании и хорошо сочетается с другими частями JavaScript-кода.",
      "title": "jQuery для JavaScript-программистов",
      "userId": 2
    },
    {
      "author": "Syfer",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/c5/c5db09d6599c65fca350f51f8b71455280615132_medium.jpg",
      "id": 6,
      "text": "Это пост можно сказать является дубликатом моей предыдущей подборки “Самые нужные плагины для Grunt”. Дело в том, что спустя много часов поиска я не нашел крутых плагинов для Gulp, которых нет для Grunt за исключением пары весьма специфичных утилит. Всё как раз наоборот, но проигнорировать множество пользователей Gulp я не мог. Все недостающие плагины я выделил, потому что Gulp умеет использовать их из Grunt, как и Grunt из Gulp. Доброго времени суток, всем! Кто-то умный, не помню в какой статье именно на Хабре, буквально недавно размышлял о процессе разработки с явным призывом автоматизировать все, что только можно автоматизировать. И лучше один раз потратить время на автоматизацию, чтобы потом экономить его на протяжении всего проекта.",
      "title": "Самые нужные плагины для Gulp",
      "userId": 3
    },
    {
      "author": "Syfer",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/c5/c5db09d6599c65fca350f51f8b71455280615132_medium.jpg",
      "id": 7,
      "text": "Сегодня Redux — это одно из наиболее интересных явлений мира JavaScript. Он выделяется из сотни библиотек и фреймворков тем, что грамотно решает множество разных вопросов путем введения простой и предсказуемой модели состояний, уклоне на функциональное программирование и неизменяемые данные, предоставления компактного API. Что ещё нужно для счастья? Redux — библиотека очень маленькая, и выучить её API не сложно. Но у многих людей происходит своеобразный разрыв шаблона — небольшое количество компонентов и добровольные ограничения чистых функций и неизменяемых данных могут показаться неоправданным принуждением. Каким именно образом работать в таких условиях? В этом руководстве мы рассмотрим создание с нуля full-stack приложения с использованием Redux и Immutable-js. Применив подход TDD, пройдём все этапы конструирования Node+Redux бэкенда и React+Redux фронтенда приложения. Помимо этого мы будем использовать такие инструменты, как ES6, Babel, Socket.io, Webpack и Mocha. Набор весьма любопытный, и вы мигом его освоите!",
      "title": "Руководство по работе с Redux",
      "userId": 3
    },
    {
      "author": "GoDZilla",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/a2/a25440653b2737613b32b2bc34783b7837dbf0a7_medium.jpg",
      "id": 8,
      "text": "После моего недавнего выступления на MoscowJS #17 с одноимённым докладом у многих возник интерес к этому инструменту. В рамках 11-го выпуска RadioJS, Миша Башкиров bashmish рассказал, что решился попробовать его в своём новом проекте, об успешном опыте и множестве положительных эмоций. Но были озвучены вопросы и возникла дискуссия, в результате которой я решил написать эту статью, чтобы раскрыть основные тезисы с доклада и рассказать о том, что тогда не успел. Статья ориентирована, как на профессионалов, так и на тех, кто с похожими технологиями ещё не сталкивался.",
      "title": "webpack: 7 бед — один ответ",
      "userId": 1
    },
    {
      "author": "GoDZilla",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/a2/a25440653b2737613b32b2bc34783b7837dbf0a7_medium.jpg",
      "id": 9,
      "text": "Всем привет! В нашей компании, помимо разработки собственной СУБД, также занимаются заказными разработками по самым разным направлениям, от суровых java-энтерпрайз приложений до небольших мобильных приложений. Наши команды стараются использовать передовые технологии и фреймворки. И как раз я являюсь представителем одной из таких команд. Сегодня хочу поделится опытом разработки на AngularJS и парой мыслей о проектировании веб приложения с использованием этого фреймворка. За время, которое я занимаюсь разработкой, мне приходилось сталкиваться с различными подходами к написанию приложений. Кто-то оборачивает простые вещи в очень странные обертки, так что автору кода приходится в дальнейшем прибегать к «комплементарному декаплингу эксплицируемых компонент» (с). Есть люди, которые, наоборот, нисколько не заморачиваются с архитектурными изысками и пишут код «здесь и сейчас», не заботясь о дальнейшем сопровождении и психическом здоровье коллег. Мне кажется, что код всё же должен быть в меру наполнен абстракциями, и при этом легко делиться на логические модули и легко читаться. Знакомство с AngularJS пару лет назад принесло понимание, как это может неплохо выглядеть в javascript'е. Требования к приложению Можно много спорить о достоинствах и недостатках AngularJS, оставим эти споры за рамками заметки, остановимся только на главном вопросе — можно ли использовать AngularJS в серьезном приложении? С одной стороны, фреймворк накладывает некоторые ограничения на структуру приложения и вводит свои собственные термины для ее описания. Другая же структура и подходы многих ставят в тупик, но это, на мой взгляд, спорный минус, поскольку любой фреймворк, решающий такие масштабные задачи, так или иначе подгоняет под себя архитектуру. Написать приложение на одном фреймворке, а потом с легкостью перенести на другой — это типичная “программистская утопия”. Поэтому аргументы по этому пункту многих коллег мне кажутся сильно надуманными. С другой стороны находится производительность как краеугольный камень любого одностраничного веб-приложения. Во многом производительность AngularJS зависит от того, насколько глубоко вы в него погрузились и насколько правильно используете те или иные компоненты фреймворка. Это не скрывают и создатели AngularJS и честно рассказывают, как все устроено внутри и как можно избежать проблем со скоростью. Главная суть в том, что фреймворк — это инструмент, а каждому инструменту подходит какой-то определенный тип задач.",
      "title": "Опыт разработки и проектирования на AngularJS",
      "userId": 1
    },
    {
      "author": "GoDZilla",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/a2/a25440653b2737613b32b2bc34783b7837dbf0a7_medium.jpg",
      "id": 10,
      "text": "Предлагаю читателям «Хабрахабра» перевод публикации «Is ReactJS really fast?» из блога компании 500Tech. Большинство разработчиков считают само собой разумеющимся, что ReactJS — это супер быстрый движок по сравнениюс другими более тяжеловесными фреймворками, такими как AngularJS и EmberJS. И даже публикация фэйковых результатов не вызывает подозрений, а ведь если копнуть глубже и проанализировать код тестов, то вы будете сильно удивлены. Virtual-DOM Все мы понимаем, что манипуляции с DOM достаточно медленные. На этом и выехал ReactJS, представив новую идею виртуального DOM, позволяющего производить все манипуляции на виртуальных объектах, а в реальное дерево объектов браузера аффектить только разницу, таким образом минимизируя количество запросов к DOM модели и тем самым ускоряя приложение. Интуитивно такой подход воспринимается как возможность серьёзного улучшение производительности, но никто не задумывается о том, насколько на производительность повлияет исполнение достаточно ресурсоёмкого javascript кода для исполнения этой задумки. И так же странно отсутствие каких-либо примеров улучшения производительности при использовании Virtual-DOM, кроме примеров сравнения с другими фреймворками.Мы все видели эти демо, предлагаю рассмотреть их более внимательно.",
      "title": "Так ли быстр ReactJS?",
      "userId": 1
    },
    {
      "author": "Syfer",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/c5/c5db09d6599c65fca350f51f8b71455280615132_medium.jpg",
      "id": 11,
      "text": "Всем привет! Нам бы хотелось представить вашему вниманию статью Энтони Гора о миграции Vue.js-приложения на Vuex. Вид приложения, над которым будет вестись работа по миграции. Далее следует перевод статьи. Всех, кому интересна данная тема, приглашаю под кат. Одной из сложностей в освоении Vuex является то, что это не столько библиотека, сколько паттерн проектирования. Из этого следует, что работа с Vuex – не столько работа с API, сколько структурирование вашего кода в соответствии с паттерном. Если вы новичок во Vuex, это может отпугивать. В этой статье я продемонстрирую как начать миграцию имеющегося Vue.js приложения на Vuex. Я покажу вам, как идентифицировать те части вашего приложения, которые должны принадлежать Vuex, и те, которые не следует переносить, как превратить функции вашей компоненты в мутации, действия и так далее, и, наконец, мы обсудим, какие преимущества мы получим в результате.Если вы не уверены, следует ли вам использовать Vuex, я рекомендую вам сначала прочесть вот эту статью: “Что за Vuex: Руководство для новичков по хранилищу данных во Vue” Учебный пример: Vue.js-кинотеатр В качестве учебного примера мы перенесем демонстрационное приложение Vue.js-кинотеатр на Vuex. Это приложение, состоящее из одного файла, построенное на компонентах Vue, вполне хороший кандидат для демонстрации миграции на Vuex, так как в нем содержится значительное количество состояний. Если хотите узнать, как построить Vue.js-кинотеатр с нуля, это часть моего полного курса разработки на Vue.js. Помните, что целью Vuex является управление состоянием приложения. Из этого следует, что для того, чтобы мигрировать Vue.js-приложение на Vuex, мы должны определить, каково будет его состояние. Мы скоро увидим состояние в коде, но полезно сначала осознать, каким оно будет, посредством простого изучения того, что вообще делает приложение, например, в нашем случае, оно отображает список фильмов, который может быть отфильтрован по дню, времени сеанса или жанру.",
      "title": "Миграция VueJS приложения на Vuex",
      "userId": 3
    },
    {
      "author": "Millenium Project",
      "avatar": "http://m.yii2.inpearls.ru/assets/avatars2/small-45983-1307438127.jpg",
      "id": 12,
      "text": "Привет друзья, хочу поведать вам, одну очень выдающуюся историю о том как я делал онлайн рулетку для одного западного заказчика. И конкретно в этой статье я по большей части коснусь разработки фронтенда. Забегая вперед хочется показать результат: Как все начиналось Обратился как-то ко мне один мой старый заказчик, и предложил пофаниться и сделать многопользовательскую онлайн рулетку на сокетах. Бюджет неплохой, сроки сжатые. Ну ок. Почему бы нет, руки уже чесались, но без бекенда я не начинал… Как только появился первый вариант бекенда. Я сразу же начал действовать. В руки мне попал набросок дизайна, и закрутилось завертелось.",
      "title": "Как я делал realtime рулетку на NodeJS & VueJS",
      "userId": 2
    },
    {
      "author": "Millenium Project",
      "avatar": "http://m.yii2.inpearls.ru/assets/avatars2/small-45983-1307438127.jpg",
      "id": 13,
      "text": "Примечание: ниже расположен перевод статьи «jQuery for JavaScript programmers», в которой автор высказывает свое мнение об этой библиотеке, ориентируясь, в первую очередь, на продвинутых программистов, и приводит несколько десятков примеров ее использования. Когда jQuery увидела свет в январе 2006, я подумал: «очередная красивая игрушка». Выбор CSS-селекторов в качестве базиса было, конечно, изящной идеей (подробнее о ней в моей заметке getElementsBySelector), но использование цепочек преобразований выглядело немного замысловато, и сама библиотека, по-видимому, не покрывала всех возможных случаев. Я расценивал тогда jQuery только как временное и проходящее решение. Только несколько месяцев спустя понял я, насколько же ошибался по отношению к ней. jQuery является просто произведением инженерного искусства. Она умело покрывает достаточно широкой диапазон повседневных функций и предоставляет при этом удобный API для расширений, с помощью которых можно добавить любую другую функциональность. Абстрактность в ней заложена на уровне ядра — речь идет о выборе DOM-элементов — и она извлекает из него максимум пользы. И что важнее всего, использование этой библиотеки подразумевает следование хорошему стилю в программировании и хорошо сочетается с другими частями JavaScript-кода.",
      "title": "jQuery для JavaScript-программистов",
      "userId": 2
    },
    {
      "author": "Syfer",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/c5/c5db09d6599c65fca350f51f8b71455280615132_medium.jpg",
      "id": 14,
      "text": "Это пост можно сказать является дубликатом моей предыдущей подборки “Самые нужные плагины для Grunt”. Дело в том, что спустя много часов поиска я не нашел крутых плагинов для Gulp, которых нет для Grunt за исключением пары весьма специфичных утилит. Всё как раз наоборот, но проигнорировать множество пользователей Gulp я не мог. Все недостающие плагины я выделил, потому что Gulp умеет использовать их из Grunt, как и Grunt из Gulp. Доброго времени суток, всем! Кто-то умный, не помню в какой статье именно на Хабре, буквально недавно размышлял о процессе разработки с явным призывом автоматизировать все, что только можно автоматизировать. И лучше один раз потратить время на автоматизацию, чтобы потом экономить его на протяжении всего проекта.",
      "title": "Самые нужные плагины для Gulp",
      "userId": 3
    },
    {
      "author": "Syfer",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/c5/c5db09d6599c65fca350f51f8b71455280615132_medium.jpg",
      "id": 15,
      "text": "Сегодня Redux — это одно из наиболее интересных явлений мира JavaScript. Он выделяется из сотни библиотек и фреймворков тем, что грамотно решает множество разных вопросов путем введения простой и предсказуемой модели состояний, уклоне на функциональное программирование и неизменяемые данные, предоставления компактного API. Что ещё нужно для счастья? Redux — библиотека очень маленькая, и выучить её API не сложно. Но у многих людей происходит своеобразный разрыв шаблона — небольшое количество компонентов и добровольные ограничения чистых функций и неизменяемых данных могут показаться неоправданным принуждением. Каким именно образом работать в таких условиях? В этом руководстве мы рассмотрим создание с нуля full-stack приложения с использованием Redux и Immutable-js. Применив подход TDD, пройдём все этапы конструирования Node+Redux бэкенда и React+Redux фронтенда приложения. Помимо этого мы будем использовать такие инструменты, как ES6, Babel, Socket.io, Webpack и Mocha. Набор весьма любопытный, и вы мигом его освоите!",
      "title": "Руководство по работе с Redux",
      "userId": 3
    },
    {
      "author": "GoDZilla",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/a2/a25440653b2737613b32b2bc34783b7837dbf0a7_medium.jpg",
      "id": 16,
      "text": "После моего недавнего выступления на MoscowJS #17 с одноимённым докладом у многих возник интерес к этому инструменту. В рамках 11-го выпуска RadioJS, Миша Башкиров bashmish рассказал, что решился попробовать его в своём новом проекте, об успешном опыте и множестве положительных эмоций. Но были озвучены вопросы и возникла дискуссия, в результате которой я решил написать эту статью, чтобы раскрыть основные тезисы с доклада и рассказать о том, что тогда не успел. Статья ориентирована, как на профессионалов, так и на тех, кто с похожими технологиями ещё не сталкивался.",
      "title": "webpack: 7 бед — один ответ",
      "userId": 1
    },
    {
      "author": "Павлуха",
      "title": "Очень темный пост",
      "text": "What is Lorem Ipsum?\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n\nWhy do we use it?\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\n\n\nWhere does it come from?\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.\n\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.",
      "userId": 4,
      "id": 17
    },
    {
      "author": "Павлуха",
      "title": "Что такое пост?",
      "text": "Я не знаю что тут писать итак все понятно!!!!",
      "userId": 4,
      "id": 18
    }
  ],
  "comments": [
    {
      "id": 1,
      "body": "Может кто-нибудь объяснить кратко, в чем отличия Polymer от Angular? Все, что перечислено в статье, так же, реализуется и с помощью Polymer.Не понятно в чем различия. Оба <100кб; и там и там progressive web app/ встраиваемые компоненты/ и тд и тп… ",
      "postId": 1,
      "author": "GoDZilla",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/a2/a25440653b2737613b32b2bc34783b7837dbf0a7_medium.jpg"
    },
    {
      "id": 2,
      "body": "Polymer — это библиотека, в отличии от Angular.ИМХО: Polymer будет либо заброшен, после предоставления Angular того же количества компонентов, либо будет использоваться для быстрого набросания недолговечных страничек.Буду рад если кто то выскажет свое противоположное мнение Polymer — это всего лишь небольшая обёртка над стандартными веб-компонентами. С чего её будут забрасывать? Скорее уж Ангуляр потихоньку будет терять популярность ввиду перехода всё большего количества разработчиков на нативную реализацию того же функционала, что предоставляет Ангуляр — точно так же, как её продолжает понемногу терять jQuery",
      "postId": 1,
      "author": "Syfer",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/c5/c5db09d6599c65fca350f51f8b71455280615132_medium.jpg"
    },
    {
      "id": 3,
      "body": "Эх, Англулярушка, что же с тобой сделали-то… Теперь ты «платформа», а так хотелось, чтобы это был простой и быстрый фреймворк. Да пусть даже либа, мы не гордые. Такое впечатление, что разработка ради разработки, и никто уже не помнит, ради чего мы здесь все собрались. Влияние Гугла напрягает, все эти «изкаробки» Material, Firebase, NativeScript. Хотели с блекджеком и распутными женщинами, получили Лас-Вегас, район Красных фонарей и космодром. И не спорь!!, компания Гугл лучше знает, что тебе нужно.",
      "postId": 1,
      "author": "Millenium Project",
      "avatar": "http://m.yii2.inpearls.ru/assets/avatars2/small-45983-1307438127.jpg"
    },
    {
      "id": 4,
      "body": "some comment",
      "postId": 2,
      "author": "GoDZilla",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/a2/a25440653b2737613b32b2bc34783b7837dbf0a7_medium.jpg"
    },
    {
      "id": 4,
      "body": "some comment",
      "postId": 2,
      "author": "Syfer",
      "avatar": "http://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/c5/c5db09d6599c65fca350f51f8b71455280615132_medium.jpg"
    },
    {
      "id": 6,
      "body": "some comment",
      "postId": 3,
      "author": "Millenium Project",
      "avatar": "http://m.yii2.inpearls.ru/assets/avatars2/small-45983-1307438127.jpg"
    },
    {
      "author": "Павлуха",
      "body": "Пост зыка!!!",
      "postId": "1",
      "id": 7
    },
    {
      "author": "Coder",
      "body": "Best!",
      "postId": "1",
      "id": 8
    },
    {
      "author": "Хрюндель",
      "body": "Первый нах!!!",
      "postId": "17",
      "id": 9
    }
  ],
  "profile": {
    "name": "typicode"
  }
}